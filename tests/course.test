<?php/** * @file * Tests for the Course module */class CourseTestCase extends DrupalWebTestCase {  public static function getInfo() {    return array(      'name' => 'Editing courses',      'description' => 'Tests Course creation, reading, updating, and deletion.',      'group' => 'Course',    );  }  public function setUp(){    parent::setUp('course');    course_type_save(new CourseType(array(      'type' => 'test',      'label' => 'label',      'weight' => 0,    )));    course_type_save(new CourseType(array(      'type' => 'test2',      'label' => 'label2',      'weight' => 2    )));    course_load_multiple(FALSE, array(), TRUE);    // Add a field to the base course type, which is created during module installation.    $field = array(      'field_name' => 'course_program_description',      'type' => 'text_long',      'cardinality' => 1,      'translatable' => FALSE,    );    field_create_field($field);    $instance = array(      'entity_type' => 'course',      'field_name' => 'course_program_description',      'bundle' => 'base',      'label' => 'Program Description',      'description' => 'Program Description',      'widget' => array(        'type' => 'text_textarea',        'weight' => 0,      ),    );    field_create_instance($instance);  }  /**   * Tests CRUD for a course.   */  function testCRUD() {    course_save(course_create(array('type' => 'test')));    course_save(course_create(array('type' => 'test2')));    // Create    $course_1 = course_create(array('type' => 'test'));    course_save($course_1);    $course_ids['course_1'] = $course_1->course_id;    $course_2 = course_create(array('type' => 'test2'));    course_save($course_2);    $course_ids['course_2'] = $course_2->course_id;    // Read    $this->assertEqual($course_1->label(), 'label', 'Created and loaded course 1.');    // Test looking up from static cache works also.    $course = course_load($course_2->course_id);    $this->assertEqual($course->label, 'label2', 'Looked up course 2.');    $loaded = course_load($course->course_id);    $this->assertEqual($loaded->course_id, $course->course_id, 'Loaded course 2 again.');    course_delete($loaded);    $courses = course_load_multiple($course_ids);    $this->assertEqual(array_keys($courses), array('test'), 'Course successfully deleted.');    // Update    course_save($courses['test2']);    $this->assertEqual($courses['test2']->course_id, $course_2['test2']->course_id, 'Course successfully updated.');    // Delete a course type.    course_type_delete(course_get_types('test'));    // Try deleting multiple courses by deleting all existing courses.    $course_ids_2 = array_keys(course_load_multiple(FALSE));    course_delete_multiple($course_ids_2);  }  /**   * Test basic edit and display.   */  function testEditAndDisplay() {    // Create course admin user    $course_admin_user = $this->drupalCreateUser(array('create course content', 'view course content', 'edit course content', 'delete course content'));    $this->drupalLogin($course_admin_user);    // Course admin creates a course    $this->drupalGet('node/add/course');    $this->assertResponse(200, t('User can visit node/add/course.'));    $description = "Credibly recaptiualize user-centric deliverables for principle-centered results. Energistically brand visionary meta-services and innovative methodologies.";    $course_edit = array (      'title' => $this->randomName(),      'field_course_program_description[und][0][value]' => $description,    );    $this->drupalPost(NULL, $course_edit, t('Save'));    $nid = db_query('SELECT nid FROM {node} WHERE title = :title', array(':title' => $course_edit['title']))->fetchField();    $this->assertText(t('Course @title has been created.'), array('@title' => $course_edit['title']));    // User can read course    $this->assertText($description);    // User can edit course    $this->drupalGet("node/$nid/edit");    $changed_edit = array(      'title' => $this->randomName(),      'field_course_program_description[und][0][value]' => $this->randomName,    );    $this->drupalPost(NULL, $changed_edit, t('Save'));    $this->assertText(t('Course @title has been updated.'), array('@title' => $changed_edit['title']));    // User can delete course    $this->drupalGet("node/$nid/edit");    $this->drupalPost(NULL, $changed_edit, t('Delete'));    $this->drupalPost(NULL, NULL, t('Delete')); // Confirmation page    $this->assertText(t('Course @title has been deleted.'), array('@title' => $changed_edit['title']));    // Manually create another course.    $another_course = course_create(array('type' => 'test'))->save();    // An unprivileged user    $user_a = $this->drupalCreateUser();    $this->drupalLogin($user_a);    $this->drupalGet($another_course->path);    $this->assertResponse(403, t('Access to course should be denied (403) to this user (@uid).', array($user_a->uid)));  }}